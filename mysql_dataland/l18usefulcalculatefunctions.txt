=>USEFUL FUNCTIONS

*MYSQL Aggregate Funtions

COUNT()
SUM()
AVE()
MIN()
MAX()


=>COUNT() Syntax 
NOTE:: Return the number of rows in group, including rows with NULL values;

SELECT COUNT(columnname)
FROM tablename
WHERE condition;



=>SUM() Syntax
NOTE:: Return the summation of all non-NULL values a set.

SELECT SUM(columnname)
FROM tablename
WHERE condition;



=>MIN() Syntax
NOTE:: Return the lowest value in a set of non_NULL values.
SELECT MIN(columnname)
FROM tablename
WHERE condition;



=>MAX() Syntax
NOTE:: Return the highest value in a set of non_NULL values.
SELECT MAX(columnname)
FROM tablename
WHERE condition;



=>AVG() Syntax
NOTE:: Return the average of
SELECT AVG(columname)
FROM tablename
WHERE condition;


_________________________________________________________________________________

EXERCISE = COUNT()

SELECT COUNT(name) FROM employees;

SELECT COUNT(city) FROM employees;


SELECT COUNT(city) FROM employees 
WHERE city = "yangon";

SELECT COUNT(employeeid) FROM employees
WHERE salary > 500000;


SELECT COUNT(age) FROM emoplyees
WHERE age > 30;

_________________________________________________________________________________


EXERCISE = SUM()

SELECT SUM(salary) FROM employees;

SELECT SUM(salary)
FROM employees
WHERE city = "yangon";

SELECT SUM(salary)
FROM employees
WHERE city = "mandalay";

SELECT SUM(salary)
FROM employees
WHERE city = "bago";

_________________________________________________________________________________

EXERCISE = MIN()

SELECT * FROM employees;

SELECT MIN(salary) FROM employees;

SELECT MIN(age) FROM employees;

SELECT MIN(salary) FROM employees
WHERE age > 30;

SELECT COUNT(*), MIN(salary)
FROM employees
WHERE age > 30;

_________________________________________________________________________________


EXERCISE = MAX()

SELECT * FROM employees;

SELECT MAX(salary) FROM employees;

SELECT MAX(age) FROM employees;

SELECT MAX(salary)
FROM employees
WHERE age > 30;

SELECT COUNT(*), MAX(salary) 
FROM employees
WHERE age > 30;

SELECT COUNT(*), MAX(age)
FROM employees
WHERE age > 30;

SELECT MAX(salary) FROM employees;

*error
SELECT MAX(salary),name FROM employees;


SELECT * FROM employees
WHERE salary = 900000;

SELECT name, salary, city FROM employees
WHERE salary = (SELECT MAX(salary) FROM employees);


_________________________________________________________________________________


EXERCISE = AVG()

SELECT * FROM employees;

SELECT AVG(salary) FROM employees;

SELECT SUM(salary) 
FROM employees
WHERE age > 30;

SELECT AVG(salary)
FROM employees
WHERE age > 30;

_________________________________________________________________________________


=> IF() Function

=Syntax
IF(condition,true,false);

SELECT IF(100 > 2, 'true', 'false');
SELECT IF(100 < 2, 'true', 'false');


SELECT * FROM employees;

SELECT name, age, salary,
	IF(age >= 35, 'Elder', 'Young')
FROM employees;


SELECT name, age, salary,
	IF(age >= 35, 'Elder', 'Young') AS 'age verify'
FROM employees;

_________________________________________________________________________________


=>TRUNCATE() Function
=Syntax
TRUNCATE(name, decimals);


*result = 123.342
SELECT TURNCATE(123.342, 3);
SELECT TURNCATE(123.342, 5);

*result = 123.34
SELECT TURNCATE(123.342, 2);

*result = 123.3
SELECT TURNCATE(123.342, 1);
SELECT TURNCATE(123.356, 1);

*result = 123
SELECT TURNCATE(123.342, 0);
SELECT TURNCATE(123.678, 0);


SELECT * FROM items;


SELECT name, price,
	TRUNCATE(price, 1)
FROM items;


SELECT name, price,
	TRUNCATE(price, 0) AS 'integer'
FROM items;

_________________________________________________________________________________

=>FLOOR() Function
FLOOR(number);

*result = 123
SELECT FLOOR(123.342);
SELECT FLOOR(123.678);
SELECT FLOOR(123);


SELECT * FROM items;

SELECT name, price,
	FLOOR(price)
FROM items;

_________________________________________________________________________________

=>ROUND() Function 
ROUND(number, decimals);

*result = 123.342
SELECT ROUND(123.342, 3);
SELECT ROUND(123.342, 5);
*result = 123.34
SELECT ROUND(123.342, 2);
*result = 123.3
SELECT ROUND(123.342, 1);
*result = 123.4
SELECT ROUND(123.356, 1);
*result = 123
SELECT ROUND(123.342, 0);
*result = 124
SELECT ROUND(123.678, 0);

SELECT * FROM items;

SELECT name, price,
	ROUND(price, 1)
FROM items;

SELECT name, price,
	ROUND(price, 0) AS 'integer'
FROM items;

_________________________________________________________________________________

=>CEIL() / CEILING() Function
CEIL(number);
CEILING(number);

*result = 124
SELECT CEIL(123.342);
SELECT CEILING(123.678);

*result = 1223
SELECT CEIL(123);


SELECT * FROM items;

SELECT name, price,
	CEIL(price)
FROM items;

_________________________________________________________________________________

=>ABS() Function
ABS(number);

*result = 123.342
SELECT ABS(-123.342);

_________________________________________________________________________________

=>SQRT() Function
SQRT(number);

*result = 7
SELECT SQRT(49);

*result = 9
SELECT SQRT(81);

_________________________________________________________________________________

=>POW() Function
POW(base, power);

*result = 100
SELECT POW(10, 2);

*result = 64
SELECT POW(4, 3);

*result = 216
SELECT POW(6, 3);

_________________________________________________________________________________

=>SIGN() Function
SIGN(number);

number > 0 return = 1
number < 0 return = -1
number = 0 return = 0

*result = 1
SELECT SIGN(500);
*result = -1
SELECT SIGN(-500);
*result = 0
SELECT SIGN(0);

_________________________________________________________________________________
